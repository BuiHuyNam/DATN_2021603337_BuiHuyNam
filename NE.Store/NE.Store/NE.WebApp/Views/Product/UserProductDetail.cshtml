@model NE.Application.Dtos.ProductDto.ProductViewDto
@{
    Layout = "~/Views/Shared/_LayoutSub.cshtml"; 
    ViewData["Title"] = "Chi tiết sản phẩm";
}
<style>
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield;
        text-align: center;
    }

    .custom-hover-green {
        color: #7fad39;
        border-color: #7fad39;
        transition: all 0.3s ease-in-out;
    }

        .custom-hover-green:hover {
            background-color: #7fad39;
            color: white;
        }

   
    /* cho mọi .color-images chỉ tồn tại về mặt DOM,
         chứ không chiếm khối nào trong flex layout */
    .color-images {
        display: contents;
    }

    .bg-custom {
        background-color: #7fad39 !important;
    }

    .text-custom {
        color: #7fad39 !important;
    }   

    .btn-custom{
        background-color: #7fad39 !important;
        color: white;
    }


</style>



<div class="container py-5">
    <div class="row shadow-lg rounded-3 bg-white p-4">
        <!-- LEFT: Hình ảnh sản phẩm -->
        <div class="col-md-6">
            <div class="border rounded p-3 text-center">
                <img id="mainImage" src="https://localhost:7099/api/ImageFile/Download?id=@Model.ProductColors.First().ImageFiles.First().Id" class="img-fluid mb-3" style="max-height: 300px;" alt="Ảnh chính">
            </div>

            <!-- Danh sách ảnh phụ -->
            <div class="mt-3 d-flex flex-wrap gap-2" id="productColorImages">
                @foreach (var color in Model.ProductColors)
                {
                    <!-- span là inline, không tạo khối mới -->
                    <span class="color-images" data-color-id="@color.ColorId">
                        @foreach (var image in color.ImageFiles)
                        {
                            <img src="https://localhost:7099/api/ImageFile/Download?id=@image.Id"
                                 class="img-thumbnail"
                                 style="width: 80px; height: 80px; object-fit: cover;"
                                 alt="Ảnh phụ @image.Id"
                                 data-image-id="@image.Id"
                                 data-color-id="@color.ColorId">
                        }
                    </span>
                }
            </div>

        </div>

        <!-- RIGHT: Thông tin sản phẩm -->
        <div class="col-md-6">
            <h2>@Model.ProductName</h2>

    
            <div class="mb-2 d-flex align-items-center" id="productRating">
                <span id="starIcons" class="me-2"></span>
                <span id="ratingCount">(0 đánh giá)</span>
            </div>


            <!-- Giá -->
            <div class="bg-light p-3 rounded w-100">
                @if (Model.Discount > 0)
                {
                    var discountedPrice = Model.Price * (1 - Model.Discount / 100);
                    <span class="text-muted" style="text-decoration: line-through;">
                        @Model.Price.ToString("N0") ₫
                    </span>
                    <span class="text-danger fs-2 fw-bold me-2">
                        @discountedPrice.ToString("N0") ₫
                    </span>
                    <span class="badge bg-danger text-uppercase fw-semibold">
                        @Model.Discount.ToString("0")% Giảm
                    </span>
                }
                else
                {
                    <span class="text-danger fs-2 fw-bold">
                        @Model.Price.ToString("N0") ₫
                    </span>
                }
            </div>

            <!-- Màu sắc -->
            <div class="mt-3">
                <label class="form-label">Màu sắc:</label>
                <div class="d-flex flex-wrap gap-2">
                    @for (int i = 0; i < Model.ProductColors.Count; i++)
                    {
                        var color = Model.ProductColors[i];
                        var isSelected = i == 0;
                        var isOutOfStock = color.Quantity <= 0;  // Kiểm tra số lượng

                        <button type="button"
                                class="btn btn-sm mr-2 @(isSelected ? "text-white" : "btn-outline-secondary") color-option @(isOutOfStock ? "disabled" : "")"
                                style="@(isSelected ? "background-color: #7fad39;" : "")"
                                data-color-id="@color.ColorId"
                                data-quantity="@color.Quantity"
                        @(isOutOfStock ? "disabled" : "")>
                            <!-- Thêm thuộc tính disabled nếu số lượng là 0 -->
                            @color.Color.ColorName
                        </button>
                    }
                </div>

            </div>

            <!-- Số lượng -->
            <div class="mt-3">
                <label class="form-label">Số lượng:</label>
                <div class="d-flex align-items-center gap-2">
                    <button class="btn btn-outline-secondary" type="button" onclick="changeQuantity(-1)">
                        <i class="fas fa-minus"></i>
                    </button>
                    <input type="number" class="form-control text-center" id="quantityInput" min="1" value="1" style="width: 70px;" />
                    <button class="btn btn-outline-secondary" type="button" onclick="changeQuantity(1)">
                        <i class="fas fa-plus"></i>
                    </button>
                    <span class="ml-3" id="quantityAvailable">
                        @Model.ProductColors.FirstOrDefault()?.Quantity sản phẩm có sẵn
                    </span>

                </div>
            </div>

            <!-- Nút hành động -->
            <div class="mt-4 d-flex gap-4">
                <form id="orderForm" asp-action="CreateOrderSingleProduct" asp-controller="Order" method="post">
                    <!-- OrderCreateDto -->
                    @* <input type="hidden" name="UserId" value="10" /> *@
                    <input type="hidden" name="Status" value="1" />
                    <input type="hidden" name="Note" value="" />
                    <input type="hidden" name="TotalMoney" id="orderTotalMoney"   />
                    <input type="hidden" name="CouponId"  />

                    <!-- OrderDetailCreateDto -->
                    <input type="hidden" name="ProductId" value="@Model.Id" />
                    <input type="hidden" name="Price" value="@(Model.Price * (1 - Model.Discount / 100))" />
                    <input type="hidden" name="Quantity" id="orderQuantity" />
                    <input type="hidden" name="TotalMoney" id="orderDetailTotalMoney" />
                    <input type="hidden" name="colorId" id="hiddenColorId2" />

                    <input type="hidden" id="productPrice" value="@Model.Price" />
                    <input type="hidden" id="productDiscount" value="@Model.Discount" />


                    <button type="submit" class="btn px-4 text-white btn-custom">Mua ngay</button>
                </form>

                <form id="addToCartForm" method="post" asp-action="AddCart" asp-controller="Cart">
                    <input type="hidden" name="productId" value="@Model.Id" />
                    <input type="hidden" name="quatity" id="quantityHiddenInput" />
                    <input type="hidden" name="colorId" id="hiddenColorId" />

                    <button type="button" id="addToCartBtn" class="btn btn-outline-success px-4 custom-hover-green ml-4">
                        <i class="fas fa-cart-plus"></i> Thêm vào giỏ
                    </button>
                </form>

            </div>
        </div>
    </div>


    <div class="row shadow-lg rounded-3 bg-white p-2 mt-2 ">
        <!-- BÊN TRÁI: Mô tả sản phẩm -->
        <div class="col-md-6">
            <div class="card border-0">
                <div class="card-body">
                    <h5 class="card-title">Mô tả sản phẩm</h5>
                    <p class="card-text">
                        @Html.Raw(Model.Description)  <!-- hoặc Model.Description nếu chỉ plain text -->
                    </p>
                </div>
            </div>
        </div>

        <!-- BÊN PHẢI: Chính sách -->
        <div class="col-md-6">
            <!-- Chính sách bảo hành -->
            <div class="card mb-3 shadow-sm">
                <div class="card-header bg-custom text-white">
                    Chính sách bảo hành
                </div>
                <div class="card-body">
                    <ul class="mb-0 pl-2">
                        <li>Bảo hành 12 tháng phần cứng tất cả lỗi của nhà sản xuất</li>
                        <li>Bảo hành miễn phí lỗi 1 đổi 1 trong 30 ngày</li>
                        <li>Phần mềm hỗ trợ trọn đời máy miễn phí</li>
                        <li>Vệ sinh, bảo dưỡng máy miễn phí mọi thời điểm</li>
                        <li>Cam kết máy zin nguyên bản, đảm bảo chất lượng của sản phẩm</li>
                    </ul>
                </div>
            </div>

            <!-- Chính sách sản phẩm -->
            <div class="card shadow-sm">
                <div class="card-header bg-custom text-white">
                    Chính sách sản phẩm
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-0">
                        <li class="d-flex align-items-center mb-2">
                            <i class="fas fa-truck fa-lg me-2 text-custom  pr-2"></i>
                            Giao hàng toàn quốc
                        </li>
                        <li class="d-flex align-items-center mb-2">
                            <i class="fas fa-credit-card fa-lg me-2 text-custom pr-2 "></i>
                            Trả góp lãi suất 0% qua thẻ tín dụng Visa, Master, JCB
                        </li>
                        <li class="d-flex align-items-center">
                            <i class="fas fa-shopping-cart fa-lg me-2 text-custom pr-2"></i>
                            Miễn phí dùng thử trong 168 giờ
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- REVIEW SECTION (static UI) -->
    <div class="row shadow-lg rounded-3 bg-white p-2 mt-2">
        <!-- Tiêu đề và thanh lọc -->
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4 class="mb-0">Đánh giá sản phẩm</h4>
                <button class="btn btn-custom" id="writeReviewBtn">
                    <i class="fas fa-edit me-1"></i> Viết đánh giá
                </button>
            </div>
            <div class="d-flex align-items-center bg-light p-3 rounded mb-4">

                <!-- Điểm trung bình -->
                <span class="me-4 fs-3 fw-bold" id="starAvg"></span>
                <!-- Nav-pills để lọc -->
                <ul class="nav nav-pills">
                    <li class="nav-item">
                        <a class="nav-link active btn-custom" href="#">Tất cả</a>
                    </li>
                    <li class="nav-item"><a class="nav-link text-custom" href="#">5 sao</a></li>
                    <li class="nav-item"><a class="nav-link text-custom" href="#">4 sao</a></li>
                    <li class="nav-item"><a class="nav-link text-custom" href="#">3 sao</a></li>
                    <li class="nav-item"><a class="nav-link text-custom" href="#">2 sao</a></li>
                    <li class="nav-item"><a class="nav-link text-custom" href="#">1 sao</a></li>
                </ul>
            </div>
        </div>

        <!-- Ví dụ 2 review tĩnh -->
        <div class="col-12" id="feedback-container">
        </div>
        <div class="col-12 d-flex justify-content-between align-items-center mt-3">
            <button class="btn btn-outline-secondary" id="prevPage">Trước</button>
            <span id="pageInfo"></span>
            <button class="btn btn-outline-secondary" id="nextPage">Sau</button>
        </div>
    </div>



</div>


<!-- Modal Viết Đánh Giá -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="reviewForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="reviewModalLabel">Viết đánh giá sản phẩm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 row align-items-center">
                        <label for="starSelect" class="col-sm-3 col-form-label">Chọn số sao:</label>
                        <div class="col-sm-9">
                            <select class="form-select" id="starSelect" required>
                                <option value="">-- Chọn số sao --</option>
                                <option value="5">5 Sao - Tuyệt vời</option>
                                <option value="4">4 Sao - Tốt</option>
                                <option value="3">3 Sao - Trung bình</option>
                                <option value="2">2 Sao - Kém</option>
                                <option value="1">1 Sao - Rất tệ</option>
                            </select>
                        </div>
                    </div>


                    <div class="mb-3">
                        <label for="reviewContent" class="form-label">Nội dung:</label>
                        <textarea class="form-control" id="reviewContent" rows="4" required></textarea>
                    </div>
                    @* <div class="mb-3"> *@
                    @*     <label for="reviewImage" class="form-label">Chọn ảnh (nếu có):</label> *@
                    @*     <input class="form-control" type="file" id="reviewImage" accept="image/*"> *@
                    @* </div> *@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-custom">Gửi đánh giá</button>
                </div>

            </form>
        </div>
    </div>
</div>


@section Scripts {
  
    <script>

              document.getElementById("orderForm").addEventListener("submit", function (e) {
            const quantity = parseInt(document.getElementById("quantityInput").value) || 1;

            const price = parseFloat(document.getElementById("productPrice").value) || 0;
            const discount = parseFloat(document.getElementById("productDiscount").value) || 0;

            const discountedPrice = price * (1 - discount / 100);
            const total = quantity * discountedPrice;
               // Làm tròn lên đến số nguyên gần nhất
        document.querySelector('input[name="Price"]').value = Math.ceil(discountedPrice);
        document.getElementById("orderQuantity").value = quantity;
        document.getElementById("orderTotalMoney").value = Math.ceil(total);  // Làm tròn lên tổng tiền
        document.getElementById("orderDetailTotalMoney").value = Math.ceil(total);  // Làm tròn lên tổng tiền
        });





            document.getElementById("addToCartBtn").addEventListener("click", function () {
            // Lấy số lượng từ input hiển thị
            const quantity = document.getElementById("quantityInput").value;

            // Gán vào input ẩn trong form
            document.getElementById("quantityHiddenInput").value = quantity;

            // Submit form
            document.getElementById("addToCartForm").submit();
        });




         
        //Xử lý modal đánh giá
            $('#writeReviewBtn').click(function () {
            $('#reviewModal').modal('show');
        });



                window.addEventListener("DOMContentLoaded", function () {
            const firstColor = document.querySelector(".color-option");
            if (firstColor) {
                firstColor.click(); // Kích hoạt sẵn để tránh null color
            }
        });



            document.querySelectorAll(".color-option").forEach(btn => {
            btn.addEventListener("click", function () {
                // Reset các nút màu
                document.querySelectorAll(".color-option").forEach(b => {
                    b.classList.remove("text-white");
                    b.classList.add("btn-outline-secondary");
                    b.style.backgroundColor = "";
                });

                // Đánh dấu nút đang chọn
                this.classList.remove("btn-outline-secondary");
                this.classList.add("text-white");
                this.style.backgroundColor = "#7fad39";

                // Lấy số lượng từ data-quantity và cập nhật hiển thị
                const quantity = this.getAttribute("data-quantity") || "0";
                document.querySelector("#quantityAvailable").textContent = `${quantity} sản phẩm có sẵn`;
                document.querySelector("#quantityInput").value = 1;

                 // Lấy colorId từ data-color-id
        const colorId = this.getAttribute("data-color-id");

        // Cập nhật ảnh chính theo màu
        const firstImage = document.querySelector(`#productColorImages .color-images[data-color-id="${colorId}"] img`);
        if (firstImage) {
            document.getElementById("mainImage").src = firstImage.src;
        }

        // Cập nhật colorId vào input ẩn để gửi lên server
        document.getElementById("hiddenColorId").value = colorId;
        document.getElementById("hiddenColorId2").value = colorId;
            });
        });

        // Đổi ảnh chính khi click ảnh phụ
        document.querySelectorAll("#productColorImages img").forEach(img => {
            img.addEventListener("click", function () {
                document.getElementById("mainImage").src = this.src;
            });
        });

        // Tăng giảm số lượng có giới hạn
        function changeQuantity(change) {
            const input = document.getElementById("quantityInput");
            let current = parseInt(input.value) || 1;

            const selectedColor = document.querySelector(".color-option.text-white");
            const max = parseInt(selectedColor?.getAttribute("data-quantity") || "1");

            current += change;
            if (current < 1) current = 1;
            if (current > max) current = max;

            input.value = current;
        }

        //Xử lý phần Feedback
        $(document).ready(function () {
            const idProduct = @Model.Id;
            let feedbacks = [];
            let currentFilter = 0; // 0 là tất cả
            let currentPage = 1;
            const pageSize = 5;

            function fetchData() {
                $.ajax({
                    url: `https://localhost:7099/api/Feedback/GetByIdProduct/${idProduct}`,
                    method: 'GET',
                    success: function (data) {
                        feedbacks = data;
                        renderAverage();
                        renderProductRating();
                        renderFeedback();
                    },
                    error: function () {
                        $('#feedback-container').html('<p class="text-danger">Không thể tải phản hồi.</p>');
                    }
                });
            }

            function renderAverage() {
                const total = feedbacks.length;
                const sum = feedbacks.reduce((acc, f) => acc + f.star, 0);
                const avg = (total === 0) ? 5 : (sum / total).toFixed(1);
                $('#starAvg').text(`${avg}/5`);
            }

            function renderFeedback() {
                let filtered = currentFilter === 0 ? feedbacks : feedbacks.filter(f => f.star === currentFilter);
                const totalPages = Math.ceil(filtered.length / pageSize);
                currentPage = Math.min(currentPage, totalPages); // đảm bảo không vượt trang

                const start = (currentPage - 1) * pageSize;
                const paged = filtered.slice(start, start + pageSize);

                let html = '';
                paged.forEach(feedback => {
                    html += `
                        <div class="d-flex mb-4">
                            <img src="/NEStore/img/feedback/avatar.jpg"
                                class="rounded-circle mr-2"
                                alt="avatar user"
                                style="object-fit: contain; width: 32px; height: 32px;" />
                            <div class="ms-3 flex-grow-1">
                                <div class="d-flex align-items-center">
                                    <h6 class="mb-0 me-2">${feedback.user?.userName || 'Ẩn danh'}</h6>
                                    <div>${generateStars(feedback.star)}</div>
                                </div>
                                <small class="text-muted">${formatDate(feedback.createdDate)}</small>
                                <p class="mt-2 mb-1">${feedback.content}</p>
                                ${feedback.image ? `
                                <div class="d-flex flex-wrap gap-2">
                                    <img src="${feedback.image}" class="img-thumbnail" style="object-fit: cover; width: 80px; height: 80px;" alt="ảnh review" />
                                </div>` : ''}
                            </div>
                        </div>`;
                });

                $('#feedback-container').html(html);
                $('#pageInfo').text(`Trang ${currentPage} / ${totalPages || 1}`);
            }

            function generateStars(star) {
                let stars = '';
                for (let i = 1; i <= 5; i++) {
                    stars += i <= star
                        ? '<i class="fas fa-star text-warning"></i>'
                        : '<i class="far fa-star text-muted"></i>';
                }
                return stars;
            }

            function formatDate(isoDateStr) {
                const date = new Date(isoDateStr);
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                const hour = String(date.getHours()).padStart(2, '0');
                const minute = String(date.getMinutes()).padStart(2, '0');
                return `${hour}:${minute} ${day}/${month}/${year}`;
            }

                    function renderProductRating() {
            const total = feedbacks.length;
            const sum = feedbacks.reduce((acc, f) => acc + f.star, 0);
            const avg = total === 0 ? 5 : (sum / total).toFixed(1);

            const fullStars = Math.floor(avg);
            const halfStar = avg - fullStars >= 0.5;

            let starsHtml = '';
            for (let i = 1; i <= 5; i++) {
                if (i <= fullStars) {
                    starsHtml += '<i class="fas fa-star text-warning"></i>';
                } else if (i === fullStars + 1 && halfStar) {
                    starsHtml += '<i class="fas fa-star-half-alt text-warning"></i>';
                } else {
                    starsHtml += '<i class="far fa-star text-muted"></i>';
                }
            }

            $('#starIcons').html(starsHtml);
            $('#ratingCount').text(`(${total} đánh giá)`);
        }


            // Gắn sự kiện cho nav filter
            $('.nav-pills .nav-link').click(function (e) {
                e.preventDefault();
                $('.nav-pills .nav-link').removeClass('active btn-custom').addClass('text-custom');
                $(this).addClass('active btn-custom').removeClass('text-custom');
                const text = $(this).text().trim();
                currentFilter = text === 'Tất cả' ? 0 : parseInt(text[0]);
                currentPage = 1;
                renderFeedback();
            });

            $('#prevPage').click(() => {
                if (currentPage > 1) {
                    currentPage--;
                    renderFeedback();
                }
            });

            $('#nextPage').click(() => {
                let filtered = currentFilter === 0 ? feedbacks : feedbacks.filter(f => f.star === currentFilter);
                const totalPages = Math.ceil(filtered.length / pageSize);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderFeedback();
                }
            });

            fetchData();
        });



        //Xử lý thêm đánh giá
             $(document).ready(function () {
            $('#reviewForm').submit(function (e) {
                e.preventDefault();

                // Lấy dữ liệu từ form
                const star = parseInt($('#starSelect').val());
                const content = $('#reviewContent').val();

                // Giả định bạn có userId và productId ở đây
                const userId = 4;
                const productId = @Model.Id; // Thay bằng id sản phẩm thật

                // Tạo object dữ liệu
                const reviewData = {
                    content: content,
                    star: star,
                    image: null,
                    userId: userId,
                    productId: productId
                };

                // Gửi ajax POST
                $.ajax({
                    url: 'https://localhost:7099/api/Feedback',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(reviewData),
                   
                    success: function (response) {
                        alert('Gửi đánh giá thành công!');
                        $('#reviewModal').modal('hide');
                        $('#reviewForm')[0].reset();
                        // Optional: refresh lại danh sách đánh giá nếu có
                    },
                    error: function (xhr) {
                        if (xhr.status === 401) alert('Cần đăng nhập');
                        else if (xhr.status === 403) alert('Không có quyền');
                    }
                });
            });
        });
    </script>

}




